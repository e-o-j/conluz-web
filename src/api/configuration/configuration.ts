/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Conluz API
 * Conluz is an API-driven application designed for the efficient management of an energy community,enabling the administration of community members and their corresponding supply points and the retrieval of consumption, production data.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  InitBody
} from '.././models';





/**
 * This endpoint serves as a crucial initiation step for the application, allowing the configuration of foundational settings. This endpoint facilitates the establishment of the default admin user credentials, pivotal for initiating subsequent configurations. By executing this endpoint, users can set the groundwork for the app, enabling the seamless configuration of users, supplies, and other application settings. No authorization is required to execute this endpoint, and the response provides confirmation of successful initialization or relevant error messages.
 * @summary Sets up the initial configuration for the app.
 */
export const init = (
    initBody: InitBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.post(
      `/api/v1/init`,
      initBody,options
    );
  }



export const getInitMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof init>>, TError,{data: InitBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof init>>, TError,{data: InitBody}, TContext> => {

const mutationKey = ['init'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof init>>, {data: InitBody}> = (props) => {
          const {data} = props ?? {};

          return  init(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InitMutationResult = NonNullable<Awaited<ReturnType<typeof init>>>
    export type InitMutationBody = InitBody
    export type InitMutationError = AxiosError<unknown>

    /**
 * @summary Sets up the initial configuration for the app.
 */
export const useInit = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof init>>, TError,{data: InitBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof init>>,
        TError,
        {data: InitBody},
        TContext
      > => {

      const mutationOptions = getInitMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    