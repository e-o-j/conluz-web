/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Conluz API
 * Conluz is an API-driven application designed for the efficient management of an energy community,enabling the administration of community members and their corresponding supply points and the retrieval of consumption, production data.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreatePlantBody,
  GetAllPlantsParams,
  PlantResponse,
  UpdatePlantBody
} from '.././models';





/**
 * This endpoint enables the update of plant information by specifying the plant's unique identifier in the endpoint path.

Clients send a request containing the updated plant details, and authentication, through an authentication token, is required for secure access.

A successful update results in an HTTP status code of 200, indicating that the plant information has been successfully modified. In cases where the update encounters errors, the server responds with an appropriate error status code along with a descriptive error message to assist clients in addressing and resolving the issue.

If you don't provide some of the optional parameters, they will be considered as null value so their values will be updated with a null value.
 * @summary Updates plant information
 */
export const updatePlant = (
    id: string,
    updatePlantBody: UpdatePlantBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlantResponse>> => {
    
    
    return axios.default.put(
      `/api/v1/plants/${id}`,
      updatePlantBody,options
    );
  }



export const getUpdatePlantMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePlant>>, TError,{id: string;data: UpdatePlantBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updatePlant>>, TError,{id: string;data: UpdatePlantBody}, TContext> => {

const mutationKey = ['updatePlant'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePlant>>, {id: string;data: UpdatePlantBody}> = (props) => {
          const {id,data} = props ?? {};

          return  updatePlant(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePlantMutationResult = NonNullable<Awaited<ReturnType<typeof updatePlant>>>
    export type UpdatePlantMutationBody = UpdatePlantBody
    export type UpdatePlantMutationError = AxiosError<unknown>

    /**
 * @summary Updates plant information
 */
export const useUpdatePlant = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePlant>>, TError,{id: string;data: UpdatePlantBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updatePlant>>,
        TError,
        {id: string;data: UpdatePlantBody},
        TContext
      > => {

      const mutationOptions = getUpdatePlantMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 *     This endpoint enables the removal of a plant from the system by specifying the plant's unique identifier within the endpoint path.

    To utilize this endpoint, clients send a DELETE request with the targeted plant's ID, requiring authentication for secure access.

    Upon successful deletion, the server responds with an HTTP status code of 200, indicating that the plant has been successfully removed.

    In cases where the deletion process encounters errors, the server returns an appropriate error status code, along with a descriptive error message to guide clients in diagnosing and addressing the issue.

 * @summary Removes a plant by ID
 */
export const deletePlant = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/api/v1/plants/${id}`,options
    );
  }



export const getDeletePlantMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePlant>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deletePlant>>, TError,{id: string}, TContext> => {

const mutationKey = ['deletePlant'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePlant>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deletePlant(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePlantMutationResult = NonNullable<Awaited<ReturnType<typeof deletePlant>>>
    
    export type DeletePlantMutationError = AxiosError<unknown>

    /**
 * @summary Removes a plant by ID
 */
export const useDeletePlant = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePlant>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletePlant>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeletePlantMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * This endpoint serves to retrieve all registered plants within the system, supporting pagination, filtering, and sorting for a customized query experience. This endpoint requires authentication through a Bearer Token for secure access. Clients can include optional query parameters such as page to specify the page number, limit to determine plants per page, filter to selectively retrieve plants based on criteria, and sort to define the order of the results. A successful request yields a paginated list of plants, providing essential details, while any authentication or retrieval issues prompt an appropriate error response. With its versatile functionality, this endpoint enhances the ability to explore and manage the array of energy plants within the system.
 * @summary Retrieves all registered plants in the system with support for pagination, filtering, and sorting.
 */
export const getAllPlants = (
    params?: GetAllPlantsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.get(
      `/api/v1/plants`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAllPlantsQueryKey = (params?: GetAllPlantsParams,) => {
    return [`/api/v1/plants`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllPlantsQueryOptions = <TData = Awaited<ReturnType<typeof getAllPlants>>, TError = AxiosError<unknown>>(params?: GetAllPlantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPlants>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllPlantsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllPlants>>> = ({ signal }) => getAllPlants(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllPlants>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllPlantsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllPlants>>>
export type GetAllPlantsQueryError = AxiosError<unknown>


export function useGetAllPlants<TData = Awaited<ReturnType<typeof getAllPlants>>, TError = AxiosError<unknown>>(
 params: undefined |  GetAllPlantsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPlants>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPlants>>,
          TError,
          Awaited<ReturnType<typeof getAllPlants>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPlants<TData = Awaited<ReturnType<typeof getAllPlants>>, TError = AxiosError<unknown>>(
 params?: GetAllPlantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPlants>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPlants>>,
          TError,
          Awaited<ReturnType<typeof getAllPlants>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPlants<TData = Awaited<ReturnType<typeof getAllPlants>>, TError = AxiosError<unknown>>(
 params?: GetAllPlantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPlants>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retrieves all registered plants in the system with support for pagination, filtering, and sorting.
 */

export function useGetAllPlants<TData = Awaited<ReturnType<typeof getAllPlants>>, TError = AxiosError<unknown>>(
 params?: GetAllPlantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPlants>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllPlantsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint is designed to create a new plant within the system. To utilize this endpoint, a client sends a request containing essential details such as the plants's address, its code and any relevant parameters. Proper authentication, through authentication tokens, is required to access this endpoint. Upon successful creation, the server responds with a status code of 200, providing comprehensive details about the newly created plant, including its unique identifier. In case of failure, the server returns an appropriate error status code along with a descriptive error message, aiding the client in diagnosing and addressing the issue.
 * @summary Creates a new plant within the system.
 */
export const createPlant = (
    createPlantBody: CreatePlantBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.post(
      `/api/v1/plants`,
      createPlantBody,options
    );
  }



export const getCreatePlantMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPlant>>, TError,{data: CreatePlantBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createPlant>>, TError,{data: CreatePlantBody}, TContext> => {

const mutationKey = ['createPlant'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPlant>>, {data: CreatePlantBody}> = (props) => {
          const {data} = props ?? {};

          return  createPlant(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePlantMutationResult = NonNullable<Awaited<ReturnType<typeof createPlant>>>
    export type CreatePlantMutationBody = CreatePlantBody
    export type CreatePlantMutationError = AxiosError<unknown>

    /**
 * @summary Creates a new plant within the system.
 */
export const useCreatePlant = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPlant>>, TError,{data: CreatePlantBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createPlant>>,
        TError,
        {data: CreatePlantBody},
        TContext
      > => {

      const mutationOptions = getCreatePlantMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    