/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Conluz API
 * Conluz is an API-driven application designed for the efficient management of an energy community,enabling the administration of community members and their corresponding supply points and the retrieval of consumption, production data.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ConfigureHuaweiBody,
  GetDailyProductionParams,
  GetHourlyProductionParams,
  GetInstantProductionParams,
  GetMonthlyProductionParams,
  GetYearlyProductionParams
} from '.././models';





/**
 * This endpoint allows to configure the app to connect with huawei.com.
This configuration is a mandatory step to be able to retrieve production data from huawei.com.
Authentication is mandated, utilizing an authentication token, to ensure secure access.
Upon successful request, the server responds with an HTTP status code of 200, along with details about the configuration already set.
In cases where the creation process encounters errors, the server responds with an appropriate error status code, accompanied by a descriptive error message to guide clients in addressing and resolving the issue.

 * @summary Sets up the configuration to be able to connect with Huawei.
 */
export const configureHuawei = (
    configureHuaweiBody: ConfigureHuaweiBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.put(
      `/api/v1/production/huawei/config`,
      configureHuaweiBody,options
    );
  }



export const getConfigureHuaweiMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof configureHuawei>>, TError,{data: ConfigureHuaweiBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof configureHuawei>>, TError,{data: ConfigureHuaweiBody}, TContext> => {

const mutationKey = ['configureHuawei'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof configureHuawei>>, {data: ConfigureHuaweiBody}> = (props) => {
          const {data} = props ?? {};

          return  configureHuawei(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ConfigureHuaweiMutationResult = NonNullable<Awaited<ReturnType<typeof configureHuawei>>>
    export type ConfigureHuaweiMutationBody = ConfigureHuaweiBody
    export type ConfigureHuaweiMutationError = AxiosError<unknown>

    /**
 * @summary Sets up the configuration to be able to connect with Huawei.
 */
export const useConfigureHuawei = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof configureHuawei>>, TError,{data: ConfigureHuaweiBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof configureHuawei>>,
        TError,
        {data: ConfigureHuaweiBody},
        TContext
      > => {

      const mutationOptions = getConfigureHuaweiMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * This endpoint offers real-time insights into the instantaneous energy production of a designated power plant supply, identified by its unique supply ID. Clients must authenticate using an authentication token. Upon a successful request, the server responds with an HTTP status code of 200, furnishing up-to-the-moment production metrics for the specified supply. In cases of errors or invalid parameters, the server issues an appropriate error status code accompanied by descriptive messages. This endpoint proves invaluable for immediate monitoring and analysis of energy output, enabling timely decision-making and performance evaluation for the designated power plant supply.
 * @summary Delivers real-time energy production details for a specific power plant supply.
 */
export const getInstantProduction = (
    params?: GetInstantProductionParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.get(
      `/api/v1/production`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetInstantProductionQueryKey = (params?: GetInstantProductionParams,) => {
    return [`/api/v1/production`, ...(params ? [params]: [])] as const;
    }

    
export const getGetInstantProductionQueryOptions = <TData = Awaited<ReturnType<typeof getInstantProduction>>, TError = AxiosError<unknown>>(params?: GetInstantProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstantProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInstantProductionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInstantProduction>>> = ({ signal }) => getInstantProduction(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInstantProduction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInstantProductionQueryResult = NonNullable<Awaited<ReturnType<typeof getInstantProduction>>>
export type GetInstantProductionQueryError = AxiosError<unknown>


export function useGetInstantProduction<TData = Awaited<ReturnType<typeof getInstantProduction>>, TError = AxiosError<unknown>>(
 params: undefined |  GetInstantProductionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstantProduction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInstantProduction>>,
          TError,
          Awaited<ReturnType<typeof getInstantProduction>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInstantProduction<TData = Awaited<ReturnType<typeof getInstantProduction>>, TError = AxiosError<unknown>>(
 params?: GetInstantProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstantProduction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInstantProduction>>,
          TError,
          Awaited<ReturnType<typeof getInstantProduction>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInstantProduction<TData = Awaited<ReturnType<typeof getInstantProduction>>, TError = AxiosError<unknown>>(
 params?: GetInstantProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstantProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Delivers real-time energy production details for a specific power plant supply.
 */

export function useGetInstantProduction<TData = Awaited<ReturnType<typeof getInstantProduction>>, TError = AxiosError<unknown>>(
 params?: GetInstantProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstantProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInstantProductionQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint enables users to retrieve yearly energy production data from a specific power plant supply, identified by its unique supply ID, within a specified date interval. Clients can include query parameters to define the start and end dates, providing flexibility in customizing the data retrieval. Proper authentication, through an authentication token, is required for secure access. A successful request returns an HTTP status code of 200, delivering a dataset that includes yearly energy production metrics for each day within the specified interval for the specified power plant supply. In cases of errors or invalid parameters, the server responds with an appropriate error status code accompanied by a descriptive message. This endpoint is valuable for monitoring and analyzing the yearly energy output of a specific power plant supply, facilitating performance assessment and optimization based on the provided date range.
 * @summary Retrieves yearly energy production data for a specified power plant supply within a given date interval.
 */
export const getYearlyProduction = (
    params: GetYearlyProductionParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.get(
      `/api/v1/production/yearly`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetYearlyProductionQueryKey = (params: GetYearlyProductionParams,) => {
    return [`/api/v1/production/yearly`, ...(params ? [params]: [])] as const;
    }

    
export const getGetYearlyProductionQueryOptions = <TData = Awaited<ReturnType<typeof getYearlyProduction>>, TError = AxiosError<unknown>>(params: GetYearlyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getYearlyProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetYearlyProductionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getYearlyProduction>>> = ({ signal }) => getYearlyProduction(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getYearlyProduction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetYearlyProductionQueryResult = NonNullable<Awaited<ReturnType<typeof getYearlyProduction>>>
export type GetYearlyProductionQueryError = AxiosError<unknown>


export function useGetYearlyProduction<TData = Awaited<ReturnType<typeof getYearlyProduction>>, TError = AxiosError<unknown>>(
 params: GetYearlyProductionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getYearlyProduction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getYearlyProduction>>,
          TError,
          Awaited<ReturnType<typeof getYearlyProduction>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetYearlyProduction<TData = Awaited<ReturnType<typeof getYearlyProduction>>, TError = AxiosError<unknown>>(
 params: GetYearlyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getYearlyProduction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getYearlyProduction>>,
          TError,
          Awaited<ReturnType<typeof getYearlyProduction>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetYearlyProduction<TData = Awaited<ReturnType<typeof getYearlyProduction>>, TError = AxiosError<unknown>>(
 params: GetYearlyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getYearlyProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retrieves yearly energy production data for a specified power plant supply within a given date interval.
 */

export function useGetYearlyProduction<TData = Awaited<ReturnType<typeof getYearlyProduction>>, TError = AxiosError<unknown>>(
 params: GetYearlyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getYearlyProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetYearlyProductionQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint enables users to retrieve monthly energy production data from a specific power plant supply, identified by its unique supply ID, within a specified date interval. Clients can include query parameters to define the start and end dates, providing flexibility in customizing the data retrieval. Proper authentication, through an authentication token, is required for secure access. A successful request returns an HTTP status code of 200, delivering a dataset that includes monthly energy production metrics for each day within the specified interval for the specified power plant supply. In cases of errors or invalid parameters, the server responds with an appropriate error status code accompanied by a descriptive message. This endpoint is valuable for monitoring and analyzing the monthly energy output of a specific power plant supply, facilitating performance assessment and optimization based on the provided date range.
 * @summary Retrieves monthly energy production data for a specified power plant supply within a given date interval.
 */
export const getMonthlyProduction = (
    params: GetMonthlyProductionParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.get(
      `/api/v1/production/monthly`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetMonthlyProductionQueryKey = (params: GetMonthlyProductionParams,) => {
    return [`/api/v1/production/monthly`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMonthlyProductionQueryOptions = <TData = Awaited<ReturnType<typeof getMonthlyProduction>>, TError = AxiosError<unknown>>(params: GetMonthlyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonthlyProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMonthlyProductionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMonthlyProduction>>> = ({ signal }) => getMonthlyProduction(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMonthlyProduction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMonthlyProductionQueryResult = NonNullable<Awaited<ReturnType<typeof getMonthlyProduction>>>
export type GetMonthlyProductionQueryError = AxiosError<unknown>


export function useGetMonthlyProduction<TData = Awaited<ReturnType<typeof getMonthlyProduction>>, TError = AxiosError<unknown>>(
 params: GetMonthlyProductionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonthlyProduction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMonthlyProduction>>,
          TError,
          Awaited<ReturnType<typeof getMonthlyProduction>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMonthlyProduction<TData = Awaited<ReturnType<typeof getMonthlyProduction>>, TError = AxiosError<unknown>>(
 params: GetMonthlyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonthlyProduction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMonthlyProduction>>,
          TError,
          Awaited<ReturnType<typeof getMonthlyProduction>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMonthlyProduction<TData = Awaited<ReturnType<typeof getMonthlyProduction>>, TError = AxiosError<unknown>>(
 params: GetMonthlyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonthlyProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retrieves monthly energy production data for a specified power plant supply within a given date interval.
 */

export function useGetMonthlyProduction<TData = Awaited<ReturnType<typeof getMonthlyProduction>>, TError = AxiosError<unknown>>(
 params: GetMonthlyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMonthlyProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMonthlyProductionQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint enables users to retrieve hourly energy production data from a specific power plant supply, identified by its unique supply ID, within a specified date interval. Clients can include query parameters to define the start and end dates, providing flexibility in customizing the data retrieval. Proper authentication, through an authentication token, is required for secure access. A successful request returns an HTTP status code of 200, delivering a dataset that includes hourly energy production metrics for each day within the specified interval for the specified power plant supply. In cases of errors or invalid parameters, the server responds with an appropriate error status code accompanied by a descriptive message. This endpoint is valuable for monitoring and analyzing the hourly energy output of a specific power plant supply, facilitating performance assessment and optimization based on the provided date range.
 * @summary Retrieves hourly energy production data for a specified power plant supply within a given date interval.
 */
export const getHourlyProduction = (
    params: GetHourlyProductionParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.get(
      `/api/v1/production/hourly`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetHourlyProductionQueryKey = (params: GetHourlyProductionParams,) => {
    return [`/api/v1/production/hourly`, ...(params ? [params]: [])] as const;
    }

    
export const getGetHourlyProductionQueryOptions = <TData = Awaited<ReturnType<typeof getHourlyProduction>>, TError = AxiosError<unknown>>(params: GetHourlyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHourlyProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHourlyProductionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHourlyProduction>>> = ({ signal }) => getHourlyProduction(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHourlyProduction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHourlyProductionQueryResult = NonNullable<Awaited<ReturnType<typeof getHourlyProduction>>>
export type GetHourlyProductionQueryError = AxiosError<unknown>


export function useGetHourlyProduction<TData = Awaited<ReturnType<typeof getHourlyProduction>>, TError = AxiosError<unknown>>(
 params: GetHourlyProductionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHourlyProduction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHourlyProduction>>,
          TError,
          Awaited<ReturnType<typeof getHourlyProduction>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHourlyProduction<TData = Awaited<ReturnType<typeof getHourlyProduction>>, TError = AxiosError<unknown>>(
 params: GetHourlyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHourlyProduction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHourlyProduction>>,
          TError,
          Awaited<ReturnType<typeof getHourlyProduction>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHourlyProduction<TData = Awaited<ReturnType<typeof getHourlyProduction>>, TError = AxiosError<unknown>>(
 params: GetHourlyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHourlyProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retrieves hourly energy production data for a specified power plant supply within a given date interval.
 */

export function useGetHourlyProduction<TData = Awaited<ReturnType<typeof getHourlyProduction>>, TError = AxiosError<unknown>>(
 params: GetHourlyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHourlyProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHourlyProductionQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint enables users to retrieve daily energy production data from a specific power plant supply, identified by its unique supply ID, within a specified date interval. Clients can include query parameters to define the start and end dates, providing flexibility in customizing the data retrieval. Proper authentication, through an authentication token, is required for secure access. A successful request returns an HTTP status code of 200, delivering a dataset that includes daily energy production metrics for each day within the specified interval for the specified power plant supply. In cases of errors or invalid parameters, the server responds with an appropriate error status code accompanied by a descriptive message. This endpoint is valuable for monitoring and analyzing the daily energy output of a specific power plant supply, facilitating performance assessment and optimization based on the provided date range.
 * @summary Retrieves daily energy production data for a specified power plant supply within a given date interval.
 */
export const getDailyProduction = (
    params: GetDailyProductionParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.get(
      `/api/v1/production/daily`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetDailyProductionQueryKey = (params: GetDailyProductionParams,) => {
    return [`/api/v1/production/daily`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDailyProductionQueryOptions = <TData = Awaited<ReturnType<typeof getDailyProduction>>, TError = AxiosError<unknown>>(params: GetDailyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDailyProductionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDailyProduction>>> = ({ signal }) => getDailyProduction(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDailyProduction>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDailyProductionQueryResult = NonNullable<Awaited<ReturnType<typeof getDailyProduction>>>
export type GetDailyProductionQueryError = AxiosError<unknown>


export function useGetDailyProduction<TData = Awaited<ReturnType<typeof getDailyProduction>>, TError = AxiosError<unknown>>(
 params: GetDailyProductionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyProduction>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDailyProduction>>,
          TError,
          Awaited<ReturnType<typeof getDailyProduction>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDailyProduction<TData = Awaited<ReturnType<typeof getDailyProduction>>, TError = AxiosError<unknown>>(
 params: GetDailyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyProduction>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDailyProduction>>,
          TError,
          Awaited<ReturnType<typeof getDailyProduction>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDailyProduction<TData = Awaited<ReturnType<typeof getDailyProduction>>, TError = AxiosError<unknown>>(
 params: GetDailyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retrieves daily energy production data for a specified power plant supply within a given date interval.
 */

export function useGetDailyProduction<TData = Awaited<ReturnType<typeof getDailyProduction>>, TError = AxiosError<unknown>>(
 params: GetDailyProductionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDailyProduction>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDailyProductionQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



